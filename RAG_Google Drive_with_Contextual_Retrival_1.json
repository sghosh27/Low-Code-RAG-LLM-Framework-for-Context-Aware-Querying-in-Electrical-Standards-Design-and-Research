{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -140,
        -220
      ],
      "id": "d41d6617-17cd-4010-8509-ecd260036937",
      "name": "When chat message received",
      "webhookId": "8f0a07ab-64c6-4035-83e1-7452f30a50a8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -180,
        20
      ],
      "id": "4ea28c33-0a96-41a4-94be-3d156f8609aa",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "0oIgWFfhbsOqJWo8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        0,
        20
      ],
      "id": "9c4b4ce4-7f4e-4b12-ad35-fe7bd11c80b9",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1024
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        60
      ],
      "id": "d5bd9352-e184-4d7d-8c16-def1aec2f654",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "0oIgWFfhbsOqJWo8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "Pinecone",
        "toolDescription": "Use this tool to search Infos about user querys",
        "pineconeIndex": {
          "__rl": true,
          "value": "scrape",
          "mode": "list",
          "cachedResultName": "scrape"
        },
        "topK": 10,
        "options": {
          "pineconeNamespace": "=Info"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        260,
        -40
      ],
      "id": "bd774ae0-628c-4f33-b884-8b6d91f23c7f",
      "name": "Pinecone VS",
      "credentials": {
        "pineconeApi": {
          "id": "EtJ7ehiT3lqtBQUk",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": {{JSON.stringify($json.text)}}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        260,
        300
      ],
      "id": "e9a5aec4-6203-4cb6-8dcf-258d625aaef1",
      "name": "PDF TO DATA"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": {{ JSON.stringify($json.data) }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        420,
        300
      ],
      "id": "22bf2531-8db1-441a-9c2b-63ca4e79d1d8",
      "name": "Document Data"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1LWcYe7CVCqFcdyLeEup490g7QK3plVEp",
          "mode": "list",
          "cachedResultName": "RAG Application",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1LWcYe7CVCqFcdyLeEup490g7QK3plVEp"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -760,
        440
      ],
      "id": "461cf648-7d30-47dc-995c-7c097527cba2",
      "name": "Contextual Rag",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "AMw4PzcPCCAN8iCH",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        740,
        300
      ],
      "id": "6b58559f-3f0d-4991-97f8-35fb4bb2e356",
      "name": "Split Chunks"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n{{ $('Document Data').item.json.data }}\n</document> \n\nHere is the chunk we want to situate within the overall document:\n\n<chunk> \n{{$json.chunk}} \n</chunk> \n\nPlease:\n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.\n- Return the **original chunk** exactly as provided unless a correction is necessary.\n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.\n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.\n- If the chunk is part of a table, include the complete table entry to maintain data integrity\n- Do not add any additional explanations or formatting beyond the required output.\n\nFill in the following format:\n[succinct context] : [original chunk or corrected version if necessary]\n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        440,
        520
      ],
      "id": "219a5a83-3fe6-423e-a8be-426d93c65d74",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "separator": " ###SPLIT### ",
        "chunkSize": 2000
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        860,
        940
      ],
      "id": "407bc627-4f93-42c7-81fe-7e68bf40e81c",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        180,
        520
      ],
      "id": "e4168988-18ae-4484-b2c9-93cbe5c38e20",
      "name": "CR Extract from Text"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a personal assistent with RAG. \nYou have access to a Pinecone Vector Database. Your job is to fetch relevant information from the knowledge base that addresses the user query.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        20,
        -220
      ],
      "id": "462aa4c5-0eb3-45d9-a9f7-baf201515a19",
      "name": "RAG Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -580,
        440
      ],
      "id": "58d64f85-ee89-44a2-9880-8b9d4affb120",
      "name": "Loop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $('Contextual Rag').item.json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $('Contextual Rag').item.json.mimeType }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $('Contextual Rag').item.json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $('Contextual Rag').item.json.name }}",
              "type": "string"
            },
            {
              "id": "8c444ba2-e384-45a3-9492-3c9d21b82cd5",
              "name": "namespace",
              "value": "={{ $json.output.namespace }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "174485c1-5f4d-47fd-b210-6c271693dc0a",
      "name": "FILE INFO",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        440
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -200,
        440
      ],
      "id": "99190afd-e073-4997-9341-4bd1a85ba7ab",
      "name": "download",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "AMw4PzcPCCAN8iCH",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('FILE INFO').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8d105126-f9ee-4b83-9afb-8f410c455124"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('FILE INFO').item.json.file_type }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "e581a8f2-218a-4666-92b9-c2b9d0ea7ef1",
      "name": "SWITCH",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -40,
        440
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        100,
        300
      ],
      "id": "f9398dc9-9a28-4ca8-aa4e-34000d5443b0",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const chunkSize = 1500;\nconst chunkOverlap = 50;\nconst text = $input.item.json.data.replace(/\\n/, '');\n\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n    let splitPoint;\n\n    // Try splitting at paragraph level first\n    splitPoint = remainingText.lastIndexOf(\"\\n\\n\", chunkSize);\n    \n    // If no paragraph split, try splitting at sentence level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\". \", chunkSize);\n    }\n\n    // If no sentence split, try splitting at word level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\" \", chunkSize);\n    }\n\n    // If still no split point, force cut at chunkSize\n    if (splitPoint === -1 || splitPoint < chunkSize * 0.5) {  \n        splitPoint = chunkSize; // Hard split if no good split point\n    }\n\n    // Extract chunk and adjust remaining text with overlap\n    let chunk = remainingText.substring(0, splitPoint).trim();\n    chunks.push(chunk);\n\n    // Move the pointer forward while keeping the overlap\n    remainingText = remainingText.substring(Math.max(0, splitPoint - chunkOverlap)).trim();\n\n    // Break if remaining text is too small to form another chunk\n    if (remainingText.length < chunkSize * 0.2) {\n        chunks.push(remainingText);\n        break;\n    }\n}\n\nreturn { chunks };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        300
      ],
      "id": "b359c7fc-eedd-491c-8085-3f3ed5c39e40",
      "name": "Text Splitter"
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "scrape",
          "mode": "list",
          "cachedResultName": "scrape"
        },
        "options": {
          "pineconeNamespace": "Info"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        980,
        520
      ],
      "id": "a209554e-4ac5-4be5-a5be-76578f2c2571",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "EtJ7ehiT3lqtBQUk",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_url",
                "value": "Info"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        860,
        780
      ],
      "id": "1f6699e0-84dc-4d54-b0c6-c8aad7074c34",
      "name": "Data Loader"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1024
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        820
      ],
      "id": "1354b44b-556b-4b21-a7e4-161215c80b0b",
      "name": "EMBEDDING",
      "credentials": {
        "openAiApi": {
          "id": "0oIgWFfhbsOqJWo8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1-0528-qwen3-8b:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        300,
        800
      ],
      "id": "4cbe10a0-e223-4da9-b81b-bb53c4ea97e6",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "bBqjH9EC84NFWkdj",
          "name": "OpenRouter account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "qwen-qwq-32b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -100,
        800
      ],
      "id": "75006bde-74fc-4914-bbb0-5aa797670abb",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "ZuEUfm1OEMyr35bl",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "069d067c-3534-4939-8ff4-34dee02a9436",
              "name": "chunk",
              "value": "={{ $('Split Chunks').item.json.chunk }}",
              "type": "string"
            },
            {
              "id": "24e01f4f-e156-47e9-a89e-9cbdccda6bd4",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "95ccbd86-efe0-4aa9-af4b-fd410445f73f",
      "name": "Get Values",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        780,
        520
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        120,
        800
      ],
      "id": "bdbf6c8e-530b-4174-b3ab-774bbfc00bca",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "0oIgWFfhbsOqJWo8",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone VS",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone VS": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "PDF TO DATA": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Text Splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contextual Rag": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Chunks": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Get Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "CR Extract from Text": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [],
        [
          {
            "node": "FILE INFO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FILE INFO": {
      "main": [
        [
          {
            "node": "download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download": {
      "main": [
        [
          {
            "node": "SWITCH",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SWITCH": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CR Extract from Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "PDF TO DATA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter": {
      "main": [
        [
          {
            "node": "Split Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "EMBEDDING": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Get Values": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        []
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b7a5f5ee-b760-497b-9a01-3aed35473ef4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "214af4f83a0f3596880e48f3694772c354ae3d905d2c2a5d673b2de25f3cc4e4"
  },
  "id": "yU3FNCWoNTu4yaXB",
  "tags": []
}